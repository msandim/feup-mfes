class TestTrainLine is subclass of TestCase

operations  

	public testSemaphoreInit: () ==> ()
	testSemaphoreInit() ==
	(
		dcl line: TrainLine := TrainLineBuilder`buildMap1();
		dcl orientation: Train`Orientation := line.getTrain("train1").getOrientation();
		dcl opOrientation: Train`Orientation := line.getTrain("train1").oppositeOrientation();
		
		-- Station with a train:
		assertEqual(<Red>, line.getBlockSemaphore("station1", orientation));
		assertEqual(<Yellow>, line.getBlockSemaphore("station1", opOrientation));
		assertEqual(<Yellow>, line.getBlockSemaphore("module1", orientation));
		assertEqual(<Red>, line.getBlockSemaphore("module1", opOrientation));
		assertEqual(<Red>, line.getBlockSemaphore("module2", orientation));
		assertEqual(<Green>, line.getBlockSemaphore("module2", opOrientation));
		
		-- Station without a train:
		assertEqual(<Yellow>, line.getBlockSemaphore("station2", orientation));
		assertEqual(<Yellow>, line.getBlockSemaphore("station2", opOrientation));
		assertEqual(<Green>, line.getBlockSemaphore("module3", orientation));
		assertEqual(<Red>, line.getBlockSemaphore("module3", opOrientation));
		assertEqual(<Red>, line.getBlockSemaphore("module4", orientation));
		assertEqual(<Green>, line.getBlockSemaphore("module4", opOrientation));
		
		IO`println("Passed semaphore initialization");
	);
	
	public testSimpleMovement: () ==> ()
	testSimpleMovement() ==
	(
		dcl line: TrainLine := TrainLineBuilder`buildMap1();
		dcl orientation: Train`Orientation := line.getTrain("train1").getOrientation();
				
		-- Test if the train is in the station, with a red light before the station and after the station
		assertEqual(line.getTrain("train1").getCurrentBlock(), line.getModule("station1").getBlock(orientation));
		assertEqual(true, line.getTrain("train1").getIsStopped()); -- Test if we are stopped
		assertEqual(<Yellow>, line.getBlockSemaphore("module1", orientation));
		assertEqual(<Red>, line.getBlockSemaphore("station1", orientation));
		assertEqual(<Red>, line.getBlockSemaphore("module2", orientation));
		
		-- If we ask to leave the station, the semaphore before the station goes orange and the after goes green	
		assertEqual(true, line.requestLeaveStation("train1"));
		assertEqual(<Yellow>, line.getBlockSemaphore("module1", orientation));
		assertEqual(<Red>, line.getBlockSemaphore("station1", orientation));
		assertEqual(<Green>, line.getBlockSemaphore("module2", orientation));
		assertEqual(true, line.getTrain("train1").getIsStopped());
		
		line.moveTrain("train1");
		assertEqual(line.getTrain("train1").getCurrentBlock(), line.getModule("module2").getBlock(orientation)); -- Check if we moved
		assertEqual(false, line.getTrain("train1").getIsStopped());
		assertEqual(<Green>, line.getBlockSemaphore("module1", orientation));
		assertEqual(<Yellow>, line.getBlockSemaphore("station1", orientation));
		assertEqual(<Red>, line.getBlockSemaphore("module2", orientation));
		
		line.moveTrain("train1");
		assertEqual(line.getTrain("train1").getCurrentBlock(), line.getModule("module2.5").getBlock(orientation)); -- Check if we moved
		assertEqual(false, line.getTrain("train1").getIsStopped());
		assertEqual(<Yellow>, line.getBlockSemaphore("station1", orientation));
		assertEqual(<Red>, line.getBlockSemaphore("module2", orientation));
		assertEqual(<Red>, line.getBlockSemaphore("module2.5", orientation));
		assertEqual(<Green>, line.getBlockSemaphore("module3", orientation));
		
		line.moveTrain("train1");
		assertEqual(line.getTrain("train1").getCurrentBlock(), line.getModule("module3").getBlock(orientation));
		assertEqual(false, line.getTrain("train1").getIsStopped());
		assertEqual(<Yellow>, line.getBlockSemaphore("station1", orientation));
		assertEqual(<Red>, line.getBlockSemaphore("module2", orientation));
		assertEqual(<Yellow>, line.getBlockSemaphore("module2.5", orientation));
		assertEqual(<Yellow>, line.getBlockSemaphore("station2", orientation));
		assertEqual(<Red>, line.getBlockSemaphore("module3", orientation));
		
		line.moveTrain("train1");
		line.stopTrain("train1");
		assertEqual(line.getTrain("train1").getCurrentBlock(), line.getModule("station2").getBlock(orientation));
		assertEqual(<Yellow>, line.getBlockSemaphore("module3", orientation));
		assertEqual(<Red>, line.getBlockSemaphore("station2", orientation));
		assertEqual(<Red>, line.getBlockSemaphore("module4", orientation));
		assertEqual(true, line.getTrain("train1").getIsStopped());
		
		assertEqual(true, line.requestLeaveStation("train1"));
		assertEqual(true, line.getTrain("train1").getIsStopped());
		assertEqual(<Green>, line.getBlockSemaphore("module4", orientation));
		
		line.moveTrain("train1");
		assertEqual(false, line.getTrain("train1").getIsStopped());
		assertEqual(<Yellow>, line.getBlockSemaphore("station2", orientation));
		assertEqual(<Red>, line.getBlockSemaphore("module4", orientation));
		assertEqual(<Green>, line.getBlockSemaphore("module5", orientation));
		
		IO`println("Passed simple movement test");
	);
	
	public testOnlyOneTrainBetweenTwoTracks: () ==> ()
	testOnlyOneTrainBetweenTwoTracks() == 
	(
		dcl line: TrainLine := TrainLineBuilder`buildMap2();
		--dcl orientation1: Train`Orientation := line.getTrain("train1").getOrientation();
		
		assertEqual(true, line.requestLeaveStation("train1"));
		line.moveTrain("train1");

		assertEqual(false, line.requestLeaveStation("train2"));
		assertEqual(false, line.requestLeaveStation("train3"));
		
		IO`println("Passed only one train between 2 tracks test");
	);
	
	public testMultiTrain: () ==> ()
	testMultiTrain() ==
	(
		dcl line: TrainLine := TrainLineBuilder`buildMap2();
		
		assertEqual(true, line.requestLeaveStation("train2"));
		line.moveTrain("train2");
		
		-- Movings for train 3:
		assertEqual(true, line.requestLeaveStation("train3"));
		line.moveTrain("train3");
		line.moveTrain("train3");
		line.moveTrain("train3");
		line.stopTrain("train3");
		assertEqual(line.getModule("station2"), line.getTrain("train3").getCurrentBlock().getModule());
		assertEqual(false, line.requestLeaveStation("train3"));
		-- End of movings for train 3, while moving train 2
		
		line.moveTrain("train2");
		line.moveTrain("train2");
		line.moveTrain("train2");
		line.stopTrain("train2");
		assertEqual(line.getModule("station1"), line.getTrain("train2").getCurrentBlock().getModule());
		
		assertEqual(true, line.requestLeaveStation("train1"));
		line.moveTrain("train1");
		line.moveTrain("train1");
		line.moveTrain("train1");
		line.moveTrain("train1");
		line.stopTrain("train1");
		assertEqual(line.getModule("station2"), line.getTrain("train1").getCurrentBlock().getModule());
		
		IO`println("Passed multi train test");
	);
	
	public testOneTrain: () ==> ()
	testOneTrain() ==
	(
		dcl trainLine: TrainLine := new TrainLine(); 
	
		trainLine.addSimpleModule("module1");
		trainLine.addSimpleModule("station1");
		trainLine.addSimpleModule("module2");
		trainLine.addSimpleModule("module3");
		trainLine.addSimpleModule("station2");
		trainLine.addSimpleModule("module4");
		trainLine.closeCircularTrack();

		trainLine.addTrain("train1", <Up>, "station1");
		
		assertEqual(true, trainLine.requestLeaveStation("train1"));
		
		IO`println("Passed One Train test");
	);
	
  public testAll: () ==> ()
  testAll() ==
  (
  	testSemaphoreInit();
  	testSimpleMovement();
  	testMultiTrain();
  	testOnlyOneTrainBetweenTwoTracks();
  	testOneTrain();
  );
  
end TestTrainLine