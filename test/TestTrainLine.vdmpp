class TestTrainLine is subclass of TestCase

operations  

	public testSimpleMovement: () ==> ()
	testSimpleMovement() ==
	(
		dcl line: TrainLine := TrainLineBuilder`buildMap1();
		dcl orientation: Train`Orientation := line.getTrain("train1").getOrientation();
		
		-- Test if the train is in the station, with a red light before the station and after the station
		assertEqual(line.getTrain("train1").getCurrentBlock(), line.getModule("station1").getBlock(orientation));
		assertEqual(true, line.getTrain("train1").getIsStopped()); -- Test if we are stopped
		assertEqual(<Red>, line.getBlockSemaphore("station1", orientation));
		assertEqual(<Red>, line.getBlockSemaphore("module2", orientation));
		
		-- If we ask to leave the station, the semaphore before the station goes orange and the after goes green	
		assertEqual(true, line.requestLeaveStation("train1"));
		assertEqual(<Green>, line.getBlockSemaphore("module2", orientation));
		assertEqual(true, line.getTrain("train1").getIsStopped());
		
		line.moveTrain("train1");
		assertEqual(false, line.getTrain("train1").getIsStopped());
		assertEqual(<Yellow>, line.getBlockSemaphore("station1", orientation));
		assertEqual(<Red>, line.getBlockSemaphore("module2", orientation));
		
		line.moveTrain("train1");
		assertEqual(false, line.getTrain("train1").getIsStopped());
		assertEqual(<Yellow>, line.getBlockSemaphore("station1", orientation));
		assertEqual(<Red>, line.getBlockSemaphore("module2", orientation));
		assertEqual(<Red>, line.getBlockSemaphore("module2.5", orientation));
		
		--line.moveTrain("train1");
		
		IO`println("Passed simple movement test");
	);

  public testAll: () ==> ()
  testAll() ==
  (
  	testSimpleMovement();
  	-- Fazer teste de mudar para yellow quando carrega no botão
  	-- Perguntar ao prof de qual é q tem de mudar para yellow
  );
  
end TestTrainLine