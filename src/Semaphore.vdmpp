class Semaphore
types
	public Color = <Red> | <Yellow> | <Green>; -- Possible state colors for the Semaphore
	public SensorStatus = <Free> | <Busy>; -- Possible status for the Sensor
	
instance variables
	private semaphoreStatus: Color := <Green>; -- The current color of the semaphore
	private sensorStatus: SensorStatus := <Free>; -- The current status for the sensor
	private semaphoreAvailable: bool := true; -- Flag that indicates if a semaphore is available
	private sensorAvailable: bool := true; -- Flag that indicates if a sensor is available
	
	-- If the current sensor is busy, then the semaphore should always be red
	inv sensorStatus = <Busy> => semaphoreStatus = <Red>;
	
operations
	
	public pure getColor: () ==> Color
	getColor() == return semaphoreStatus;
	
	public pure isAvailable: () ==> bool
	isAvailable() == return semaphoreAvailable and sensorAvailable;
	
	public pure getSensor: () ==> SensorStatus
	getSensor() == return sensorStatus;
	
	public pure isSensorAvailable: () ==> bool
	isSensorAvailable() == return sensorAvailable;
	
	public setAvailability: bool ==> ()
	setAvailability(availability) == semaphoreAvailable := availability;
	
	public setSensorAvailability: bool ==> ()
	setSensorAvailability(availability) == sensorAvailable := availability;
	
	public setColor: (Color) ==> ()
	setColor(color) == semaphoreStatus := color;
	
	public setColorAndSensor: Color * SensorStatus ==> ()
	setColorAndSensor(color, sensor) ==
	atomic
	(
		semaphoreStatus := color;
		sensorStatus := sensor;
	);
	
end Semaphore