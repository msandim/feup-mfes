class Train
types
	public Orientation = <Up> | <Down>;
values

instance variables
	private orientation: Orientation := <Up>;
	private currentBlock: Block;
	
operations

	-- Constructor
	public Train: (Orientation) * (Block) ==> Train
	Train(initialOrientation, initialBlock) ==
	(
		orientation := initialOrientation;
		currentBlock := initialBlock;
		return self
	);
	
	-- Move a train
	public move: () ==> ()
	move() ==
	(
	
		-- Get next block to move to:
		dcl nextBlock: Block := currentBlock.getNextBlock(orientation);
		
		-- The old block we're on should now be yellow:
		currentBlock.setSemaphore(<Yellow>);

		-- The new block we're on should now be red:
		nextBlock.setSemaphore(<Red>);

		-- Move to the next block:	
		currentBlock := nextBlock;
	)
	pre currentBlock.getNextBlock(orientation).canEnter()
	post currentBlock = currentBlock~.getNextBlock(orientation) and -- New block is equals to old block 
		not currentBlock.canEnter() and -- We cannot enter in the new block (New block is red)
		currentBlock~.getSemaphore() = <Yellow>; -- Old block is yellow
		
	-- Gets
	pure public getCurrentBlock: () ==> Block
	getCurrentBlock() ==
	(
		return currentBlock;
	);

functions

traces

end Train