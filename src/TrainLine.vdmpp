class TrainLine
types
	public String = seq of char; 
values

instance variables
	private modules: map String to Module := {|->};
	private trains: map String to Train := {|->};
	
	private headModuleId: [String] := nil;
	private tailModuleId: [String] := nil;
	
	-- Colocar invariante de headModule e tailModule serem ambos nulos antes de se adicionar modulos
	inv (headModuleId = nil and tailModuleId = nil) => card dom modules = 0;
	
	-- There arent any trains in the same block
	inv not exists t1, t2 in set dom trains & (t1 <> t2 and trains(t1).getCurrentBlock() = trains(t2).getCurrentBlock());
	
	-- Colocar invariantes de ter de haver simple modules entre stations
	--inv forall m1, m2 in set dom modules & (card dom modules >); 
	
	
operations
	
	-- *****************************************************************
	-- **************************** Constructors ************************
	-- *****************************************************************	
	
	-- *****************************************************************
	-- ************************ Public Methods *************************
	-- *****************************************************************
	
	-- ** Adds a simple module (between 2 stations) to the line: **
	public addSimpleModule: (String) ==> ()
	addSimpleModule(id) ==
	(
		dcl simpleModule: Module := new SimpleModule(id, self);
		addModule(id, simpleModule);
	);
	
	-- Adds a station module to the line:
	public addStationModule: (String) ==> ()
	addStationModule(id) ==
	(
		dcl stationModule: Module := new StationModule(id, self);
		addModule(id, stationModule);
	);
	
	-- Closes the circular track:
  public closeCircularTrack: () ==> ()
	closeCircularTrack() ==
	(
		-- Close the circular track:
		modules(headModuleId).setDownModule(modules(tailModuleId));
		modules(tailModuleId).setUpModule(modules(headModuleId));
		
		-- The semaphores of simple modules in the station must be red or yellow
		for all id in set dom modules do
		(
			dcl module: Module := modules(id);
			
			if module.getIsStation() then
			(
				module.getDownModule().getBlock(<Down>).setSemaphore(<Red>, <Down>);
				module.getDownModule().getBlock(<Down>).setSemaphore(<Yellow>, <Up>);
				
				module.getUpModule().getBlock(<Up>).setSemaphore(<Red>, <Up>);
				module.getUpModule().getBlock(<Up>).setSemaphore(<Yellow>, <Down>);
			); -- FALTA POS-CONDICAO!
			
		);
	)
	pre card dom modules >= 2 -- To close a circular track we have to have at least two modules in the track
	post modules(headModuleId).getDownModule() = modules(tailModuleId) and -- the first module must be linked to the last model
		modules(tailModuleId).getUpModule() = modules(headModuleId); -- The last module must be linked to the first model
	
	-- Adds a train to the train line:
	public addTrain: (String) * (Train`Orientation) * (String) ==> ()
	addTrain(id, orientation, moduleId) ==
	(
		trains := trains ++ {id |-> new Train(orientation, modules(moduleId).getBlock(orientation))};
		modules(moduleId).getBlock(orientation).trainEnter(orientation);
	)
	post id in set dom trains and
		trains(id).getCurrentBlock().getSemaphore(orientation) = <Red> and trains(id).getCurrentBlock().getSensor() = <Busy>;
	--pre id not in set dom trains and -- Id of this train must be unique
		--not exists t in set rng trains & t.getCurrentBlock().getModule() = modules(moduleId);
	--post card trains = card trains~ + 1 and -- Increment one in the trains sequence
		--exists1 t in set trains & t.getCurrentBlock().getModule() = modules(moduleId); -- One train now is in the block
		
		
	/**
	pre moduleId in set dom modules and -- The module we want the train on must be valid
		not exists t1 in set rng trains & t1.getBlock().getModule() = modules(moduleId) and -- The module must not have any train on
		id not in set dom trains -- An id with this train must not exist
	post id in set dom trains and -- The id was added to the modules
		exists1 t1 in set rng trains & t1.getBlock().getModule() = modules(moduleId); -- The train is now in this module
		*/
	
	-- Moves a train with a specific id
	public moveTrain: (String) ==> ()
	moveTrain(id) == trains(id).move();
	
	-- Requests a specific train to leave a station
	public requestLeaveStation: (String) ==> bool
	requestLeaveStation(id) == trains(id).requestLeaveStation();
	
	-- *****************************************************************
	-- ****************** Private Auxiliar Methods *********************
	-- *****************************************************************
	
	-- Adds a module to the station
	private addModule: (String) * (Module) ==> ()
	addModule(newModuleId, newModule) ==
	(
		if card dom modules > 0 -- if we already have a module added
		then
		(
			dcl tailModule: Module := modules(tailModuleId);			
			
			-- Connect the new model to the last model insered:
			tailModule.setUpModule(newModule);
			newModule.setDownModule(tailModule);
			
			-- Update the last model inserted:
			tailModuleId := newModuleId;
			
		)
		else
		(
			atomic
			(
				headModuleId := newModuleId;
				tailModuleId := newModuleId;
			);
		);
		
		modules := modules munion { newModuleId |-> newModule };
	)
	post newModuleId in set dom modules and -- The id was added to the modules
	  if card dom modules~ = 0
	  	then (headModuleId = newModuleId and tailModuleId = newModuleId)
	    else (tailModuleId = newModuleId and modules(tailModuleId~).getUpModule() = newModule and newModule.getDownModule() = modules(tailModuleId~));
		
	public pure getTrain: String ==> Train
	getTrain(id) == return trains(id);
	
	public pure getModule: String ==> Module
	getModule(id) == return modules(id);
	
	public pure getBlockSemaphore: String * Train`Orientation ==> Block`Semaphore
	getBlockSemaphore(idArg, orientationArg) ==
	(
		getModule(idArg).getBlock(orientationArg).getSemaphore(orientationArg);
	);
	
	-- Gets
	pure public getTrains: () ==> (map String to Train)
	getTrains() == 
	(
		return trains;
	);

functions

traces

end TrainLine