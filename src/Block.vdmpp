class Block
		
instance variables
	private module : Module; -- Module in which this Block is insired
	private trainLine: TrainLine; -- Trainline in which this block is insired
	private upSemaphore: Semaphore := new Semaphore(); -- Semaphore that controls the entries in the Up direction
	private downSemaphore: Semaphore := new Semaphore(); -- Semaphore that controls the entries in the Down direction
	
operations

	-- Constructor
	public Block: (Module) * (TrainLine) ==> Block
	Block(moduleArg, trainLineArg) ==
	(
		module := moduleArg;
		trainLine := trainLineArg;
		return self;
	);
	
	-- Makes the modifications in this block's semaphores as if a train is entering this block
	public trainEnter: (Train`Orientation) ==> ()
	trainEnter(trainOrientation) ==
	(
		if trainOrientation = <Up>
		then
			upSemaphore.setColorAndSensor(<Red>, <Busy>)
		else
			downSemaphore.setColorAndSensor(<Red>, <Busy>);
	);
	
	-- Makes the modifications in this block's semaphores as if a train is exiting this block
	public trainExit: (Train`Orientation) ==> ()
	trainExit(trainOrientation) ==
	(
		-- Update the block we're leaving
		dcl semaphoreNextColor: Semaphore`Color;
		dcl previousSemaphoreNextColor: Semaphore`Color;
		
		-- If this is a module after a station, it must be red at all time, otherwise yellow
		if getModule().getPreviousModule(trainOrientation).getIsStation()
		then
			semaphoreNextColor := <Red>
		else
			semaphoreNextColor := <Yellow>;
	
		if trainOrientation = <Up>
		then
			upSemaphore.setColorAndSensor(semaphoreNextColor, <Free>)
		else
			downSemaphore.setColorAndSensor(semaphoreNextColor, <Free>);
		
		-- Check the previous block to the block we're leaving:
		-- If the previous-previous block is a station or if a train is there, then it must be red
		if getPreviousBlock(trainOrientation).getPreviousBlock(trainOrientation).isInStation()
				or getPreviousBlock(trainOrientation).getSemaphore(trainOrientation).getSensor() = <Busy> then
			previousSemaphoreNextColor := <Red>
		elseif getPreviousBlock(trainOrientation).isInStation() then -- If the previous block from the block we're leaving is a station, leave it yellow
			previousSemaphoreNextColor := <Yellow>
		else
			previousSemaphoreNextColor := <Green>;
		
		-- Update the semalhore:
		getModule().getPreviousModule(trainOrientation).getBlock(trainOrientation).setSemaphore(previousSemaphoreNextColor, trainOrientation);
	);
	
	-- Checks if it's safe for a train to enter this block in this direction (orientation)
	pure public canEnter: (Train`Orientation) ==> (bool)
	canEnter(orientationArg) ==
		if orientationArg = <Up>
		then
			return upSemaphore.getColor() <> <Red> and upSemaphore.isAvailable()
		else
			return downSemaphore.getColor() <> <Red> and downSemaphore.isAvailable();
	
	-- Checks if this block is insired in a station module
	pure public isInStation: () ==> (bool)
	isInStation() == return module.getIsStation();
	
	-- Gets the semaphore from this block, according to a certain orientation
	pure public getSemaphore: (Train`Orientation) ==> (Semaphore)
	getSemaphore(orientationArg) == 
		if orientationArg = <Up>
		then
			return upSemaphore else
			return downSemaphore;
	
	-- Gets the module in which this block is insired
	pure public getModule: () ==> (Module)
	getModule() == return module;
	
	-- Gets the next block to this block, in a specified orientation
	pure public getNextBlock: (Train`Orientation) ==> (Block)
	getNextBlock(orientation) == return module.getNextBlock(orientation);
	
	-- Gets the previous block to this block, in a specified orientation
	pure public getPreviousBlock: (Train`Orientation) ==> (Block)
	getPreviousBlock(orientation) == return module.getPreviousBlock(orientation);
	
	-- Sets the value of the semaphore that controls the traffic coming from a specific orientation
	public setSemaphore: (Semaphore`Color) * (Train`Orientation) ==> ()
	setSemaphore(semaphoreArg, orientationArg) ==
		if orientationArg = <Up>
		then
			upSemaphore.setColor(semaphoreArg)
		else
			downSemaphore.setColor(semaphoreArg);

end Block