class SimpleBlock is subclass of Block

types
	public Semaphore = <Red> | <Yellow> | <Green> | <Unavailable>;
	public Sensor = <Free> | <Busy> | <Unavailable>;

values

instance variables
	private sensor: Sensor := <Free>;
	private semaphore: Semaphore := <Green>;
	private train: [Train] := nil;
	
	-- Invariants:
	-- Sensor must be unavailable or mark if a train is in the block
	inv (sensor = <Free> and train = nil) or (sensor = <Busy> and train <> nil) or sensor = <Unavailable>;
	
	-- Semaphore must be unavailable or mark if a train is in the block´
	inv ((semaphore = <Green> or semaphore = <Yellow>) and train = nil) or (semaphore = <Red> and train <> nil) or semaphore = <Unavailable>;

operations

	-- Constructor
	public SimpleBlock: Semaphore * Train ==> SimpleBlock
	SimpleBlock(initialSemaphore, initialTrain) ==
	(
		semaphore := initialSemaphore;
		train := initialTrain;
		return self
	);
	
functions

traces

end SimpleBlock